# Gamified Habit Tracker - System Design & Development Plan

## 1. System Architecture Overview

### Technology Stack
- **Backend**: Node.js with Express.js
- **Database**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time**: Supabase Real-time subscriptions
- **File Storage**: Supabase Storage
- **Push Notifications**: Firebase Cloud Messaging (FCM)
- **Payment Processing**: Stripe
- **Health Integration**: Apple HealthKit/Google Fit APIs

### Architecture Pattern
- **Microservices-oriented** modular monolith
- **Event-driven** architecture for real-time updates
- **RESTful APIs** with GraphQL consideration for complex queries
- **Clean Architecture** with separation of concerns

## 2. Database Schema Design

### Core Tables

#### Users Table
```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR UNIQUE NOT NULL,
  username VARCHAR UNIQUE,
  title VARCHAR,
  profile_image_url VARCHAR,
  rank VARCHAR,
  overall_level INTEGER DEFAULT 1,
  total_xp BIGINT DEFAULT 0,
  current_hp INTEGER DEFAULT 100,
  max_hp INTEGER DEFAULT 100,
  in_app_currency INTEGER DEFAULT 0,
  gems INTEGER DEFAULT 0,
  game_difficulty VARCHAR DEFAULT 'normal', -- easy, normal, hard
  is_punished BOOLEAN DEFAULT false,
  punishment_distance_km DECIMAL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Skills Table
```sql
CREATE TABLE skills (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR NOT NULL,
  description TEXT,
  icon_url VARCHAR,
  level INTEGER DEFAULT 1,
  current_xp BIGINT DEFAULT 0,
  xp_config_type VARCHAR DEFAULT 'formula', -- formula, custom
  base_xp INTEGER DEFAULT 100,
  growth_multiplier DECIMAL DEFAULT 1.5,
  custom_xp_levels JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Tasks Table
```sql
CREATE TABLE tasks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR NOT NULL,
  description TEXT,
  icon_url VARCHAR,
  difficulty_rating INTEGER DEFAULT 1, -- 1-5 stars
  xp_reward INTEGER,
  frequency_type VARCHAR NOT NULL, -- daily, weekly, monthly, specific_days, one_time
  frequency_config JSONB, -- {days: [1,2,3], times_per_day: 1}
  level INTEGER DEFAULT 1,
  current_xp BIGINT DEFAULT 0,
  current_streak INTEGER DEFAULT 0,
  best_streak INTEGER DEFAULT 0,
  total_completions INTEGER DEFAULT 0,
  xp_config_type VARCHAR DEFAULT 'formula',
  base_xp INTEGER DEFAULT 50,
  growth_multiplier DECIMAL DEFAULT 1.2,
  custom_xp_levels JSONB,
  punishment_hp_reduction INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Task-Skill Relations Table
```sql
CREATE TABLE task_skills (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID REFERENCES tasks(id) ON DELETE CASCADE,
  skill_id UUID REFERENCES skills(id) ON DELETE CASCADE,
  xp_percentage DECIMAL DEFAULT 100, -- percentage of XP to distribute to this skill
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Task Completions Table
```sql
CREATE TABLE task_completions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID REFERENCES tasks(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  completed_date DATE NOT NULL,
  xp_earned INTEGER NOT NULL,
  streak_count INTEGER,
  bonus_xp INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Enemies (Bad Habits) Table
```sql
CREATE TABLE enemies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR NOT NULL,
  icon_url VARCHAR,
  hp_reduction INTEGER NOT NULL,
  current_streak INTEGER DEFAULT 0,
  best_streak INTEGER DEFAULT 0,
  level INTEGER DEFAULT 1,
  total_avoided_days INTEGER DEFAULT 0,
  last_triggered_date DATE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Enemy Triggers Table
```sql
CREATE TABLE enemy_triggers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  enemy_id UUID REFERENCES enemies(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  triggered_date DATE NOT NULL,
  hp_lost INTEGER NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Power-ups Table
```sql
CREATE TABLE power_ups (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR NOT NULL,
  description TEXT,
  icon_url VARCHAR,
  effect_type VARCHAR NOT NULL, -- hp_restore, xp_boost, extra_life
  effect_value INTEGER NOT NULL,
  cost_currency INTEGER,
  cost_gems INTEGER,
  usage_limit_per_day INTEGER,
  cooldown_hours INTEGER,
  is_system_item BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Power-up Purchases Table
```sql
CREATE TABLE power_up_purchases (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  power_up_id UUID REFERENCES power_ups(id) ON DELETE CASCADE,
  quantity INTEGER DEFAULT 1,
  total_cost_currency INTEGER,
  total_cost_gems INTEGER,
  purchased_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Achievements Table
```sql
CREATE TABLE achievements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR NOT NULL,
  description TEXT,
  category VARCHAR NOT NULL, -- consistency, milestone, challenge, recovery
  condition_config JSONB NOT NULL, -- {type: 'streak', value: 7, skill_id: 'uuid'}
  reward_config JSONB NOT NULL, -- {currency: 100, gems: 5, xp: 50}
  icon_url VARCHAR,
  difficulty VARCHAR DEFAULT 'normal',
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### User Achievements Table
```sql
CREATE TABLE user_achievements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  achievement_id UUID REFERENCES achievements(id) ON DELETE CASCADE,
  progress_value INTEGER DEFAULT 0,
  is_completed BOOLEAN DEFAULT false,
  completed_at TIMESTAMPTZ,
  rewards_claimed BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Notifications Table
```sql
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  type VARCHAR NOT NULL, -- task_reminder, level_up, achievement, punishment
  title VARCHAR NOT NULL,
  message TEXT NOT NULL,
  data JSONB, -- additional data for the notification
  is_read BOOLEAN DEFAULT false,
  scheduled_for TIMESTAMPTZ,
  sent_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### Payment Transactions Table
```sql
CREATE TABLE payment_transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  transaction_type VARCHAR NOT NULL, -- gem_purchase, subscription
  amount_usd DECIMAL NOT NULL,
  gems_purchased INTEGER,
  stripe_payment_intent_id VARCHAR,
  status VARCHAR NOT NULL, -- pending, completed, failed, refunded
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

## 3. API Module Structure

### 3.1 Authentication Module (`/auth`)
- **POST** `/auth/register` - User registration
- **POST** `/auth/login` - User login
- **POST** `/auth/refresh` - Refresh token
- **POST** `/auth/logout` - User logout
- **POST** `/auth/forgot-password` - Password reset

### 3.2 User Profile Module (`/users`)
- **GET** `/users/profile` - Get user profile
- **PUT** `/users/profile` - Update user profile
- **GET** `/users/stats` - Get user statistics
- **POST** `/users/upload-avatar` - Upload profile image
- **PUT** `/users/settings` - Update user settings

### 3.3 Skills Module (`/skills`)
- **GET** `/skills` - Get user skills
- **POST** `/skills` - Create new skill
- **GET** `/skills/:id` - Get skill details
- **PUT** `/skills/:id` - Update skill
- **DELETE** `/skills/:id` - Delete skill
- **GET** `/skills/:id/stats` - Get skill statistics

### 3.4 Tasks Module (`/tasks`)
- **GET** `/tasks` - Get user tasks (with filters)
- **POST** `/tasks` - Create new task
- **GET** `/tasks/:id` - Get task details
- **PUT** `/tasks/:id` - Update task
- **DELETE** `/tasks/:id` - Delete task
- **POST** `/tasks/:id/complete` - Complete task
- **GET** `/tasks/:id/stats` - Get task statistics
- **GET** `/tasks/calendar/:date` - Get tasks for specific date

### 3.5 Enemies Module (`/enemies`)
- **GET** `/enemies` - Get user enemies
- **POST** `/enemies` - Create new enemy
- **GET** `/enemies/:id` - Get enemy details
- **PUT** `/enemies/:id` - Update enemy
- **DELETE** `/enemies/:id` - Delete enemy
- **POST** `/enemies/:id/trigger` - Trigger bad habit
- **GET** `/enemies/:id/stats` - Get enemy statistics

### 3.6 Power-ups Module (`/powerups`)
- **GET** `/powerups` - Get available power-ups
- **POST** `/powerups` - Create custom power-up
- **PUT** `/powerups/:id` - Update power-up
- **DELETE** `/powerups/:id` - Delete power-up
- **POST** `/powerups/:id/purchase` - Purchase power-up
- **POST** `/powerups/:id/use` - Use power-up

### 3.7 Achievements Module (`/achievements`)
- **GET** `/achievements` - Get user achievements
- **GET** `/achievements/available` - Get available achievements
- **POST** `/achievements/:id/claim` - Claim achievement rewards

### 3.8 Economy Module (`/economy`)
- **GET** `/economy/balance` - Get user balance
- **POST** `/economy/purchase-gems` - Purchase gems with real money
- **GET** `/economy/transactions` - Get transaction history

### 3.9 Punishment Module (`/punishment`)
- **GET** `/punishment/status` - Get punishment status
- **POST** `/punishment/complete` - Complete punishment
- **POST** `/punishment/verify-distance` - Verify walking distance

### 3.10 Analytics Module (`/analytics`)
- **GET** `/analytics/dashboard` - Get dashboard data
- **GET** `/analytics/xp-history` - Get XP progression
- **GET** `/analytics/completion-rates` - Get completion statistics

## 4. Service Layer Architecture

### 4.1 Core Services

#### UserService
```javascript
class UserService {
  async createUser(userData)
  async getUserById(userId)
  async updateUser(userId, updates)
  async getUserStats(userId)
  async updateXP(userId, xpAmount)
  async updateHP(userId, hpChange)
  async checkLevelUp(userId)
}
```

#### SkillService
```javascript
class SkillService {
  async createSkill(userId, skillData)
  async getSkillsByUser(userId)
  async updateSkillXP(skillId, xpAmount)
  async calculateLevelRequirement(skill, level)
  async getSkillStats(skillId, timeframe)
}
```

#### TaskService
```javascript
class TaskService {
  async createTask(userId, taskData)
  async completeTask(taskId, userId, date)
  async calculateTaskReward(task, streak)
  async updateTaskStreak(taskId, isCompleted)
  async getTasksForDate(userId, date)
  async checkTaskReminders()
}
```

#### EnemyService
```javascript
class EnemyService {
  async createEnemy(userId, enemyData)
  async triggerEnemy(enemyId, userId)
  async updateEnemyStreak(enemyId, isTriggered)
  async calculateHPLoss(enemy)
}
```

#### GameEngineService
```javascript
class GameEngineService {
  async processTaskCompletion(taskId, userId)
  async processEnemyTrigger(enemyId, userId)
  async checkAchievements(userId, actionType, data)
  async applyDifficultyModifiers(baseValue, difficulty)
  async handleLevelUp(userId, entityType, entityId)
}
```

#### NotificationService
```javascript
class NotificationService {
  async scheduleTaskReminder(task)
  async sendPushNotification(userId, notification)
  async createSystemNotification(userId, type, data)
  async processScheduledNotifications()
}
```

#### PaymentService
```javascript
class PaymentService {
  async createPaymentIntent(userId, amount, gemPackage)
  async processWebhook(stripeEvent)
  async grantPurchasedGems(userId, gemAmount)
  async validatePurchase(transactionId)
}
```

## 5. Real-time Features with Supabase

### Real-time Subscriptions
```javascript
// XP updates
supabase
  .channel('user_xp_updates')
  .on('postgres_changes', {
    event: 'UPDATE',
    schema: 'public',
    table: 'users',
    filter: `id=eq.${userId}`
  }, handleXPUpdate)
  .subscribe()

// Achievement unlocks
supabase
  .channel('achievements')
  .on('postgres_changes', {
    event: 'INSERT',
    schema: 'public',
    table: 'user_achievements',
    filter: `user_id=eq.${userId}`
  }, handleNewAchievement)
  .subscribe()
```

## 6. Integration Points

### 6.1 Health App Integration
```javascript
class HealthIntegrationService {
  async verifyWalkingDistance(userId, requiredKm, timeframe)
  async syncHealthData(userId)
  async validatePunishmentCompletion(userId, distanceData)
}
```

### 6.2 Push Notifications (FCM)
```javascript
class FCMService {
  async sendToDevice(token, notification)
  async sendToTopic(topic, notification)
  async scheduleNotification(userId, notification, scheduledTime)
}
```

## 7. Development Plan & Implementation Phases

### Phase 1: Foundation (Weeks 1-3)
1. **Setup & Configuration**
   - Initialize Node.js project with Express
   - Configure Supabase connection
   - Setup authentication middleware
   - Create basic project structure

2. **Database Setup**
   - Create all database tables
   - Setup Row Level Security (RLS) policies
   - Create database functions and triggers
   - Setup initial seed data

3. **Core Authentication**
   - Implement user registration/login
   - Setup JWT token handling
   - Create authentication middleware
   - Implement password reset

### Phase 2: Core Game Mechanics (Weeks 4-7)
1. **User Profile System**
   - User CRUD operations
   - Profile image upload
   - Settings management
   - XP and level calculation

2. **Skills & Tasks System**
   - Skills CRUD operations
   - Tasks CRUD operations
   - Task completion logic
   - XP distribution system

3. **Basic Game Engine**
   - Level calculation algorithms
   - Difficulty modifiers
   - Streak tracking
   - Basic achievement system

### Phase 3: Advanced Features (Weeks 8-11)
1. **Enemies & Punishment System**
   - Bad habits tracking
   - HP reduction logic
   - Punishment mode implementation
   - Health app integration for verification

2. **Economy System**
   - Power-ups management
   - In-app currency system
   - Gems purchasing (Stripe integration)
   - Purchase validation

3. **Achievement System**
   - Achievement condition checking
   - Reward distribution
   - Progress tracking
   - Real-time achievement unlocks

### Phase 4: Enhanced Features (Weeks 12-15)
1. **Analytics & Statistics**
   - Dashboard data aggregation
   - Historical data analysis
   - Performance metrics
   - Export functionality

2. **Notification System**
   - Push notification setup
   - Scheduled reminders
   - System notifications
   - Notification preferences

3. **Real-time Features**
   - WebSocket connections
   - Live updates
   - Real-time synchronization

### Phase 5: Polish & Optimization (Weeks 16-18)
1. **Data Backup & Sync**
   - Cloud backup implementation
   - Data restoration
   - Offline sync capability

2. **Performance Optimization**
   - Database query optimization
   - Caching implementation
   - API rate limiting
   - Load testing

3. **Security & Compliance**
   - Security audit
   - GDPR compliance
   - Data encryption
   - Privacy controls

## 8. Data Flow Examples

### Task Completion Flow
1. User completes task via mobile app
2. API receives completion request
3. TaskService validates completion
4. GameEngineService calculates rewards
5. XP distributed to task, skills, and user
6. Achievement system checks for unlocks
7. Real-time updates sent to client
8. Notifications scheduled if needed

### Enemy Trigger Flow
1. User reports bad habit via app
2. EnemyService processes trigger
3. HP reduction calculated and applied
4. Streak reset if applicable
5. Check if user HP reaches zero
6. Trigger punishment mode if needed
7. Update enemy statistics
8. Send real-time updates to client

### Level Up Flow
1. XP gain triggers level check
2. GameEngineService calculates new level
3. Rewards generated and applied
4. Achievement progress updated
5. Notification created and scheduled
6. Real-time level up event sent
7. Update user statistics

## 9. Error Handling & Monitoring

### Error Categories
- **Validation Errors**: Input validation failures
- **Business Logic Errors**: Game rule violations
- **Integration Errors**: Third-party service failures
- **System Errors**: Database/server issues

### Monitoring Points
- API response times
- Database query performance
- Real-time connection health
- Payment processing success rates
- User engagement metrics

## 10. Security Considerations

### Data Protection
- Row Level Security (RLS) in Supabase
- JWT token validation
- API rate limiting
- Input sanitization
- SQL injection prevention

### Privacy Compliance
- GDPR data handling
- User consent management
- Data deletion workflows
- Privacy policy integration
- Audit logging

This system design provides a comprehensive foundation for building your gamified habit tracker with Node.js and Supabase, ensuring scalability, maintainability, and a robust user experience.
